"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const package_managers_1 = require("../lib/package-managers");
const schematics_1 = require("../lib/schematics");
const abstract_action_1 = require("./abstract.action");
class AddAction extends abstract_action_1.AbstractAction {
    handle(inputs, outputs, extraFlags) {
        return __awaiter(this, void 0, void 0, function* () {
            const manager = yield package_managers_1.PackageManagerFactory.find();
            const libraryInput = inputs.find(input => input.name === 'library');
            if (!libraryInput) {
                return;
            }
            const library = libraryInput.value;
            const packageName = library.startsWith('@')
                ? library.split('/', 2).join('/')
                : library.split('/', 1)[0];
            // Remove the tag/version from the package name.
            const collectionName = (packageName.startsWith('@')
                ? packageName.split('@', 2).join('@')
                : packageName.split('@', 1).join('@')) +
                library.slice(packageName.length);
            let tagName = packageName.startsWith('@')
                ? packageName.split('@', 3)[2]
                : packageName.split('@', 2)[1];
            tagName = tagName || 'latest';
            yield manager.addProduction([collectionName], tagName);
            const schematicName = 'nest-add';
            try {
                const collection = schematics_1.CollectionFactory.create(collectionName);
                const schematicOptions = [];
                const extraFlagsString = extraFlags ? extraFlags.join(' ') : undefined;
                yield collection.execute(schematicName, schematicOptions, extraFlagsString);
            }
            catch (e) {
                return;
            }
        });
    }
}
exports.AddAction = AddAction;
